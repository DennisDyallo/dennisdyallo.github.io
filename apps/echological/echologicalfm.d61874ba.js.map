{"mappings":"ACGA,IAAM,gBAAkB,CACpB,UAAW,GACX,WAAY,mBAChB,EAEM,SAAW,IAAI,qBAAqB,AAAC,IACvC,EAAQ,OAAO,CAAC,AAAA,IACR,EAAM,cAAc,GACpB,EAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,WAC3B,SAAS,SAAS,CAAC,EAAM,MAAM,EAEvC,EACJ,EAAG,iBAGH,SAAS,gBAAgB,CAAC,mBAAoB,KAG1C,AADiB,SAAS,gBAAgB,CAAC,kBAClC,OAAO,CAAC,AAAA,IACb,SAAS,OAAO,CAAC,EACrB,GAGA,SAAS,gBAAgB,CAAC,gBAAgB,OAAO,CAAC,AAAA,IAC9C,EAAO,gBAAgB,CAAC,QAAS,SAAU,CAAC,EACxC,EAAE,cAAc,GAChB,IAAM,EAAS,SAAS,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,SACxD,GAAI,EAAQ,CACR,EAAO,cAAc,CAAC,CAClB,SAAU,SACV,MAAO,OACX,GAEA,IAAM,EAAU,SAAS,aAAa,CAAC,aACjC,EAAY,SAAS,aAAa,CAAC,cACrC,GAAW,IACX,EAAQ,SAAS,CAAC,MAAM,CAAC,UACzB,EAAU,SAAS,CAAC,MAAM,CAAC,UAEnC,CACJ,EACJ,GAGA,IAAM,EAAY,SAAS,aAAa,CAAC,cACnC,EAAU,SAAS,aAAa,CAAC,YAEnC,CAAA,GAAa,GACb,EAAU,gBAAgB,CAAC,QAAS,KAChC,EAAU,SAAS,CAAC,MAAM,CAAC,UAC3B,EAAQ,SAAS,CAAC,MAAM,CAAC,SAC7B,EAER,GAGA,IAAI,QAAU,CAAA,EAEd,SAAS,qBACL,IAAM,EAAO,SAAS,aAAa,CAAC,SACpC,GAAI,GAAQ,OAAO,OAAO,CAAG,OAAO,WAAW,CAAE,CAC7C,IAAM,EAAW,OAAO,OAAO,AAE/B,CAAA,EAAK,KAAK,CAAC,SAAS,CAAG,CAAC,WAAW,EADlB,AAAW,GAAX,EAC6B,GAAG,CAAC,AACtD,CACA,QAAU,CAAA,CACd,CAEA,OAAO,gBAAgB,CAAC,SAAU,KACzB,UACD,OAAO,qBAAqB,CAAC,KACzB,qBACA,QAAU,CAAA,CACd,GACA,QAAU,CAAA,EAElB","sources":["<anon>","src/js/main.js"],"sourcesContent":["// Echological.fm - Minimal JavaScript for subtle animations\n// Intersection Observer for fade-in animations\nconst observerOptions = {\n    threshold: 0.1,\n    rootMargin: '0px 0px -50px 0px'\n};\nconst observer = new IntersectionObserver((entries)=>{\n    entries.forEach((entry)=>{\n        if (entry.isIntersecting) {\n            entry.target.classList.add('fade-in');\n            observer.unobserve(entry.target);\n        }\n    });\n}, observerOptions);\n// Observe elements on page load\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    // Add fade-in animation to mission and CTA sections\n    const sections = document.querySelectorAll('.mission, .cta');\n    sections.forEach((section)=>{\n        observer.observe(section);\n    });\n    // Smooth scroll for anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach((anchor)=>{\n        anchor.addEventListener('click', function(e) {\n            e.preventDefault();\n            const target = document.querySelector(this.getAttribute('href'));\n            if (target) {\n                target.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start'\n                });\n                // Close mobile menu if open\n                const navMenu = document.querySelector('.nav-menu');\n                const hamburger = document.querySelector('.hamburger');\n                if (navMenu && hamburger) {\n                    navMenu.classList.remove('active');\n                    hamburger.classList.remove('active');\n                }\n            }\n        });\n    });\n    // Hamburger menu toggle\n    const hamburger = document.querySelector('.hamburger');\n    const navMenu = document.querySelector('.nav-menu');\n    if (hamburger && navMenu) hamburger.addEventListener('click', ()=>{\n        hamburger.classList.toggle('active');\n        navMenu.classList.toggle('active');\n    });\n});\n// Optional: Add a subtle parallax effect to hero on scroll (very lightweight)\nlet ticking = false;\nfunction updateHeroParallax() {\n    const hero = document.querySelector('.hero');\n    if (hero && window.scrollY < window.innerHeight) {\n        const scrolled = window.scrollY;\n        const parallax = scrolled * 0.3;\n        hero.style.transform = `translateY(${parallax}px)`;\n    }\n    ticking = false;\n}\nwindow.addEventListener('scroll', ()=>{\n    if (!ticking) {\n        window.requestAnimationFrame(()=>{\n            updateHeroParallax();\n            ticking = false;\n        });\n        ticking = true;\n    }\n});\n\n//# sourceMappingURL=echologicalfm.d61874ba.js.map\n","// Echological.fm - Minimal JavaScript for subtle animations\n\n// Intersection Observer for fade-in animations\nconst observerOptions = {\n    threshold: 0.1,\n    rootMargin: '0px 0px -50px 0px'\n};\n\nconst observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            entry.target.classList.add('fade-in');\n            observer.unobserve(entry.target);\n        }\n    });\n}, observerOptions);\n\n// Observe elements on page load\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Add fade-in animation to mission and CTA sections\n    const sections = document.querySelectorAll('.mission, .cta');\n    sections.forEach(section => {\n        observer.observe(section);\n    });\n\n    // Smooth scroll for anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function (e) {\n            e.preventDefault();\n            const target = document.querySelector(this.getAttribute('href'));\n            if (target) {\n                target.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start'\n                });\n                // Close mobile menu if open\n                const navMenu = document.querySelector('.nav-menu');\n                const hamburger = document.querySelector('.hamburger');\n                if (navMenu && hamburger) {\n                    navMenu.classList.remove('active');\n                    hamburger.classList.remove('active');\n                }\n            }\n        });\n    });\n\n    // Hamburger menu toggle\n    const hamburger = document.querySelector('.hamburger');\n    const navMenu = document.querySelector('.nav-menu');\n\n    if (hamburger && navMenu) {\n        hamburger.addEventListener('click', () => {\n            hamburger.classList.toggle('active');\n            navMenu.classList.toggle('active');\n        });\n    }\n});\n\n// Optional: Add a subtle parallax effect to hero on scroll (very lightweight)\nlet ticking = false;\n\nfunction updateHeroParallax() {\n    const hero = document.querySelector('.hero');\n    if (hero && window.scrollY < window.innerHeight) {\n        const scrolled = window.scrollY;\n        const parallax = scrolled * 0.3;\n        hero.style.transform = `translateY(${parallax}px)`;\n    }\n    ticking = false;\n}\n\nwindow.addEventListener('scroll', () => {\n    if (!ticking) {\n        window.requestAnimationFrame(() => {\n            updateHeroParallax();\n            ticking = false;\n        });\n        ticking = true;\n    }\n});\n"],"names":["observerOptions","threshold","rootMargin","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","unobserve","document","addEventListener","sections","querySelectorAll","section","observe","anchor","e","preventDefault","querySelector","getAttribute","scrollIntoView","behavior","block","navMenu","hamburger","remove","toggle","ticking","updateHeroParallax","hero","window","scrollY","innerHeight","scrolled","style","transform","requestAnimationFrame"],"version":3,"file":"echologicalfm.d61874ba.js.map"}